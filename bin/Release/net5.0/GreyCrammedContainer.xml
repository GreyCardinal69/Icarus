<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GreyCrammedContainer</name>
    </assembly>
    <members>
        <member name="T:GreyCrammedContainer.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GreyCrammedContainer.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GreyCrammedContainer.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:GreyCrammedContainer.ArrayListSerialization">
            <summary>
            Main class that handles arrays and lists, nested lists,
            jagged arrays, one, two and three dimensional arrays.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.ArrayListSerialization.IndentTab">
            <summary>
            A static instance of a string builder for Indentation.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.ArrayListSerialization.IndentSyntax">
            <summary>
            A static instance of a string builder for Indentation of syntax.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.ArrayListSerialization.SerializeArrayList(System.Object,System.Int32,System.Text.StringBuilder@)">
            <summary>
            Handles serialization logic for objects of type array and list.
            </summary>
            <param name="List">The received list or array.</param>
            <param name="Indent">Indentation amount.</param>
            <param name="Builder">The main stringBuilder.</param>
            <returns>
            The formatted string representation of the array or list.
            </returns>
        </member>
        <member name="M:GreyCrammedContainer.ArrayListSerialization.SerializeDimensionalArray(System.Object,System.Int32,System.Text.StringBuilder@)">
            <summary>
            Serializes 2 dimensional arrays.
            </summary>
            <param name="ToSerialize"></param>
            <param name="Indent"></param>
            <param name="Builder"></param>
        </member>
        <member name="M:GreyCrammedContainer.ArrayListSerialization.D2ArrayHandler``1(``0[0:,0:],System.Text.StringBuilder,System.Int32,System.Text.StringBuilder@)">
            <summary>
            Handles 2D arrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Dim">The array.</param>
            <param name="Indent">The indentation.</param>
            <param name="IndentN">Indentation amount.</param>
            <param name="Builder">The main string builder reference to write to.</param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.ArrayListSerialization.D3TypeNameSwitch(System.Object,System.Text.StringBuilder,System.Int32,System.Text.StringBuilder@,System.String)">
            <summary>
            Switch on array type to call D3ArrayHandler.
            </summary>
            <param name="ToSerialize">The object to serialize</param>
            <param name="IndentTab">The indentation.</param>
            <param name="Indent">Indent amount.</param>
            <param name="Builder">The main string builder reference to write to.</param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.ArrayListSerialization.D3ArrayHandler``1(``0[0:,0:,0:],System.Text.StringBuilder,System.Int32,System.Text.StringBuilder@)">
            <summary>
            Handles seriialization of 3D arrays.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Dim">The array.</param>
            <param name="Indent">The indentation.</param>
            <param name="IndentN">Indentation amount.</param>
            <param name="Builder"></param>
            <returns></returns>
        </member>
        <member name="T:GreyCrammedContainer.ClassStructSerialization">
            <summary>
            Main class that handles serialization of classes and structs.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.ClassStructSerialization.SerializeClassStruct(System.Object,System.Int32,System.Text.StringBuilder@)">
            <summary>
            Handles serialization logic for objects of type class or struct.
            </summary>
            <param name="Received">The received class or struct.</param>
            <param name="Indent">Indentation amount.</param>
            <param name="Builder">The main string builder, contains all the info.</param>
            <returns>
            The formatted string representation of the class or struct.
            </returns>
        </member>
        <member name="T:GreyCrammedContainer.DeserializableType">
            <summary>
            Enum for keeping track of object types, used in deserialization code.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.Numeric">
            <summary>
            True for objects of type numeric.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.String">
            <summary>
            True for objects of type string.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.Boolean">
            <summary>
            True for objects of type boolean.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.Char">
            <summary>
            True for objects of type character.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.Class">
            <summary>
            True for objects of type class and struct.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.Array">
            <summary>
            True for objects of type array.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.List">
            <summary>
            True for objects of type list.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.Dictionary">
            <summary>
            True for objects of type dictionary.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.Tuple">
            <summary>
            True for objects of type tuple.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.Enum">
            <summary>
            True for objects of type enum.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.NULL">
            <summary>
            Represents a type that is not implemented.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.DimensionalArray2D">
            <summary>
            True for two dimensional arrays.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.DimensionalArray3D">
            <summary>
            True for three dimensional arrays.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.Object">
            <summary>
            True for objects of type object, or whatever.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DeserializableType.DateTime">
            <summary>
            True for objects of type DateTime, not yet implemented.
            </summary>
        </member>
        <member name="T:GreyCrammedContainer.DeserializationHelpers">
            <summary>
            Class with methods for deserialization code.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.DeserializationHelpers.NumericResolver(System.Type,System.String)">
            <summary>
            Resolves objects considered numeric, such as: int, long, short, byte, etc.
            </summary>
            <param name="TypeOf"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.DeserializationHelpers.StringResolver(System.String)">
            <summary>
            Resolves objects of type string, takes care of ":", and ' " '.
            </summary>
            <param name="Line">The line to solve.</param>
            <returns></returns>
        </member>
        <member name="T:GreyCrammedContainer.DictionarySerialization">
            <summary>
            Main class that handles dictionaries of any type.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.DictionarySerialization.SecondaryBuilder">
            <summary>
            Handles additional serialization, made to avoid infinite stringbuilder concatenation.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.DictionarySerialization.SerializeDictionaryInternal``2(System.Collections.Generic.IDictionary{``0,``1},System.Int32,System.Text.StringBuilder@,System.Boolean)">
            <summary>
            Handles logic for serializing dictionaries.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="data">The dictionary TKey/TValue.</param>
            <param name="Indent">The indentation amount.</param>
            <param name="isIndended">Is the dictionary nested?</param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.DictionarySerialization.SerializeDictionary(System.Object,System.Int32,System.Text.StringBuilder@)">
            <summary>
            Wrapper for SerializeDictionaryInternal.
            </summary>
            <param name="Dict">The received dictionary</param>
            <param name="Indent">Indentation amount.</param>
            <returns>
            The formatted string representation of the dictionary.
            </returns>
        </member>
        <member name="T:GreyCrammedContainer.Extensions">
            <summary>
            A class with extensions used in .gcc code for different uses.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.Extensions.IsNumber(System.Object)">
            <summary>
            Checks if the provided object is a numeric value of types: sbyte, short,
            ushort, int, uint, long, ulong, float, double or deciamal
            </summary>
            <param name="value">The object to check.</param>
            <returns>True if an object is a numerical</returns>
        </member>
        <member name="M:GreyCrammedContainer.Extensions.GetNumericType``1(System.Object)">
            <summary>
            Checks if the provided object is a numeric value of types: sbyte, short,
            ushort, int, uint, long, ulong, float, double or deciamal
            </summary>
            <param name="value">The value to check.</param>
            <returns>The type of the number, f.e int or long.</returns>
        </member>
        <member name="M:GreyCrammedContainer.Extensions.ParseToEnum``1(System.Object)">
            <summary>
            Parses an object into an enum using a generic T type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.Extensions.ParseToEnumNonGeneric(System.Object,System.Type)">
            <summary>
            Parses an object into an enum without a generic T type.
            </summary>
            <param name="obj">The object that is the enum.</param>
            <param name="EnumType">The type of the enum to parse to.</param>
            <returns>Returns an enum casted to type object.</returns>
        </member>
        <member name="M:GreyCrammedContainer.Extensions.HowManyOfx(System.String,System.String)">
            <summary>
            Given a string, checks how many times the input pattern is present within it.
            </summary>
            <param name="str">The string to check.</param>
            <param name="pattern">The pattern to look for.</param>
            <returns>The number of occurances of the pattern.</returns>
        </member>
        <member name="T:GreyCrammedContainer.Formatting">
            <summary>
            Enum to define whether an object should be serialized with indentation.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.Formatting.Indented">
            <summary>
            The GccWriter will use indentation.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.Formatting.None">
            <summary>
            The GccWriter wont use indentation.
            </summary>
        </member>
        <member name="T:GreyCrammedContainer.GccConverter">
            <summary>
            Provides methods for converting between .NET types and GCC types.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.GccConverter.Result">
            <summary>
            The main string builder to which the text is written to.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.GccConverter.StartCopy">
            <summary>
            A stringbuilder that copies the first half of lines before appending a .gcc object.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.GccConverter.EndCopy">
            <summary>
            A stringbuilder that copies the second half of lines after appending a .gcc object.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.GccConverter.Deserialize``1(System.String)">
            <summary>
            Deserializes the .GCC file to the provided .NET type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path of the .gcc file.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:GreyCrammedContainer.GccConverter.DeserializeAppended``1(System.String,System.String)">
            <summary>
            Deserializes the .GCC object with the given ID which was written along other objects to a file to the provided .NET type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path">The path to the file</param>
            <param name="ID">The ID of the object.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:GreyCrammedContainer.GccConverter.Serialize(System.String,System.Object)">
            <summary>
            Takes an object and serializes it to a .GCC file, the file is overwritten.
            </summary>
            <param name="Path">The file's path.</param>
            <param name="ToSerialize">The object to serialize.</param>
        </member>
        <member name="M:GreyCrammedContainer.GccConverter.Serialize(System.String,System.Object,GreyCrammedContainer.Formatting)">
            <summary>
            Takes an object and serializes it to a .GCC file, the file is overwritten.
            </summary>
            <param name="Path">The file's path.</param>
            <param name="ToSerialize">The object to serialize.</param>
            <param name="Formatting">Does the serializer use indentation?</param>
        </member>
        <member name="M:GreyCrammedContainer.GccConverter.SerializeAppend(System.String,System.Object,System.String)">
            <summary>
            Takes an object and serializes it to a file, but appends it to a file. This is used
            for the Index feature.
            </summary>
            <param name="Path">The file's path.</param>
            <param name="ToSerialize">The object to serialize.</param>
            <param name="ID">The object's unique ID in the file.</param>
        </member>
        <member name="M:GreyCrammedContainer.GccConverter.SerializeChangeAppended(System.String,System.Object,System.String)">
            <summary>
            Takes an object and serializes it to its place in the file specified, other objects in the file that were
            added using the Index feature and untouched.
            </summary>
            <param name="Path">The file's path.</param>
            <param name="ToSerialize">The object to serialize.</param>
            <param name="ID">The object's unique ID in the file.</param>
        </member>
        <member name="M:GreyCrammedContainer.GccConverter.SerializeStringOnly(System.Object)">
            <summary>
            Serializes the object to .GCC, returns the .GCC string representation only, without writing to a file.
            </summary>
            <param name="ToSerialize"></param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.GccConverter.SerializeInternalStringOnly(System.Object,GreyCrammedContainer.SerializableType)">
            <summary>
            Method for serializing an object into a .GCC representation, returns the .GCC string without writing to file.
            </summary>
            <param name="received">The object to serialize.</param>
            <param name="Type">The object's type.</param>
            <param name="Mode"></param>
        </member>
        <member name="M:GreyCrammedContainer.GccConverter.SerializeInternal(System.String,System.Object,GreyCrammedContainer.SerializableType,GreyCrammedContainer.SerializationMode,System.Boolean,System.String)">
            <summary>
            Main method for serializing an object into a .GCC file.
            </summary>
            <param name="path">The specified file's path.</param>
            <param name="received">The object to serialize.</param>
            <param name="Type">The object's type.</param>
            <param name="Mode"></param>
            <param name="NoIndentation">Determines if an object should be serialized without indentation.</param>
            <param name="ID">How the object should be serialized.</param>
        </member>
        <member name="T:GreyCrammedContainer.GccReader">
            <summary>
            Main class that handles deserialization.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.GccReader.End">
            <summary>
            Keeps track of index in dictionary deserialization code.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.GccReader.DeserializeInternal(System.Collections.Generic.List{System.String},System.Type,System.String)">
            <summary>
            Main method for deserializing a .GCC object to the provided .NET type.
            </summary>
            <param name="Lines">The file lines.</param>
            <param name="Type">The generic type to deserialize to.</param>
            <param name="LastType">Arrays last type. Used in array deserialization code.</param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.GccReader.DeserializeThreeDimensionalArray(System.Collections.Generic.List{System.String},System.Type)">
            <summary>
            Called by DeserializeInternal to handle the deserialization of three dimensional arrays.
            </summary>
            <param name="Lines">The lines of the nested array.</param>
            <param name="Type">The generic type of the array.</param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.GccReader.DeserializeTwoDimensionalArray(System.Collections.Generic.List{System.String},System.Type)">
            <summary>
            Called by DeserializeInternal to handle the deserialization of two dimensional arrays.
            </summary>
            <param name="Lines">The lines of the nested array.</param>
            <param name="Type">The generic type of the array.</param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.GccReader.DeserializeList(System.Collections.Generic.List{System.String},System.Type,System.String)">
            <summary>
            Called by DeserializeInternal to handle the deserialization of lists.
            </summary>
            <param name="Lines">Read lines of the list.</param>
            <param name="Type">The generic type of the list.</param>
            <param name="LastType">Optional type.</param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.GccReader.DeserializeArray(System.Collections.Generic.List{System.String},System.Type)">
            <summary>
            Called by DeserializeInternal to handle the deserialization of Arrays.
            </summary>
            <param name="Lines">Read lines of the list.</param>
            <param name="Type">The generic type of the list.</param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.GccReader.DeserializeDictionary(System.Collections.Generic.List{System.String},System.Type)">
            <summary>
            Called by DeserializeInternal to handle the deserialization of Dictionaries.
            </summary>
            <param name="Lines">Read lines of the list.</param>
            <param name="Type">The generic type of the list.</param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.GccReader.DeserializeClassStruct(System.Collections.Generic.List{System.String},System.Type)">
            <summary>
            Called by DeserializeInternal to handle the deserialization of Classes and Structs.
            </summary>
            <param name="Lines">Read lines of the list.</param>
            <param name="Type">The generic type of the list.</param>
            <returns></returns>
        </member>
        <member name="T:GreyCrammedContainer.GccWriter">
            <summary>
            Main class for writing .NET objects into .GCC files.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.GccWriter.AdditionalIndentation">
            <summary>
            A static string builder instance for indentation.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.GccWriter.DoesntUseIndentation">
            <summary>
            Indicates that an object will be serialized without indentation.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.GccWriter.Write(System.Object,GreyCrammedContainer.SerializableType,System.Text.StringBuilder@,System.String,System.Int32,System.Boolean)">
            <summary>
            Method for writing objects to .GCC representation.
            </summary>
            <param name="ToSerialize">The object to serialize.</param>
            <param name="Type">The object's SerializableType.</param>
            <param name="MainBuilder">The main string builder instance to write to.</param>
            <param name="Name">An optional name to append before the value.</param>
            <param name="Indent">Indentation amount.</param>
            <param name="IgnoreSpaceDec">Boolean to force Writer to not use spaces after ":" and ":" itself.</param>
            <returns>The string .gcc string representation of the object.</returns>
        </member>
        <member name="T:GreyCrammedContainer.SerializableType">
            <summary>
            Enum for keeping track of object types.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializableType.Numeric">
            <summary>
            True for objects of type numeric.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializableType.String">
            <summary>
            True for objects of type string.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializableType.Boolean">
            <summary>
            True for objects of type boolean.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializableType.Char">
            <summary>
            True for objects of type character.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializableType.Class">
            <summary>
            True for objects of type class and struct.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializableType.Array">
            <summary>
            True for objects of type array and list.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializableType.Dictionary">
            <summary>
            True for objects of type dictionary.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializableType.Tuple">
            <summary>
            True for objects of type tuple.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializableType.Enum">
            <summary>
            True for objects of type enum.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializableType.NULL">
            <summary>
            Object is not defined.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializableType.DateTime">
            <summary>
            True for objects of type DateTime
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializableType.DimensionalArray">
            <summary>
            True for 2d or more dimensional arrays, not yet implemented.
            </summary>
        </member>
        <member name="T:GreyCrammedContainer.SerializationMode">
            <summary>
            Defines how the object should be serialized.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializationMode.Default">
            <summary>
            Default serialization mode serializes the provided object to a .GCC string, overwrites the file at the given path.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializationMode.Append">
            <summary>
            Append mode serializes the provided object to a .GCC string and appends it to the file in the given path. Also known as the indexing feature.
            </summary>
        </member>
        <member name="F:GreyCrammedContainer.SerializationMode.ChangeAppended">
            <summary>
            ChangeAppended serializes the provided object to a .GCC string, reads the file at the given path, overwrites the old version of the object with the new one and rewrites the file,
            leaving other objects untouched.
            </summary>
        </member>
        <member name="T:GreyCrammedContainer.TimeWatch">
            <summary>
            A stopwatch alternative which is more accurate.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.TimeWatch.#ctor">
            <summary>
            Main constructor.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.TimeWatch.Calibrate">
            <summary>
            Calibrates the time watch.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.TimeWatch.Reset">
            <summary>
            Reset's the time watch.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.TimeWatch.Start">
            <summary>
            Starts the time watch.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.TimeWatch.Stop">
            <summary>
            Stops the time watch.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.TimeWatch.GetElapsedMilliseconds">
            <summary>
            Gets the elapsed time in milliseconds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.TimeWatch.GetSplitTimeSpan">
            <summary>
            Gets the elapsed time in split milliseconds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.TimeWatch.GetElapsedTimeInMicroseconds">
            <summary>
            Gets the elapsed time in Microseconds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.TimeWatch.GetSplitTimeInMicroseconds">
            <summary>
            Gets the elapsed time in split milliseconds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.TimeWatch._GetSplitTime_ms">
            <summary>
            Returns split time in ms / 1000
            </summary>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.TimeWatch._GetElapsedTime_ms">
            <summary>
            Returns time in ms / 1000
            </summary>
            <returns></returns>
        </member>
        <member name="T:GreyCrammedContainer.TupleDeserializerSimple">
            <summary>
            Main method for deserializing Tuples.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.TupleDeserializerSimple.EvaluateSimpleTupleList(System.Collections.Generic.List{System.String},System.Type,System.Collections.IList@)">
            <summary>
            Returns a tuple that is inside an array or a list.
            </summary>
            <param name="Lines"></param>
            <param name="Type"></param>
            <param name="MutterList"></param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.TupleDeserializerSimple.EvaluateTupleSingleton(System.Collections.Generic.List{System.String},System.Type)">
            <summary>
            A method that works with individual tuples.
            </summary>
            <param name="Lines">The tuple lines.</param>
            <param name="Type">The tuple's type.</param>
            <returns></returns>
        </member>
        <member name="T:GreyCrammedContainer.TypeGetters">
            <summary>
            Provides methods for determining .NET object types.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.TypeGetters.IsList(System.Object)">
            <summary>
            Checks if the provided object is a list.
            </summary>
            <param name="obj"></param>
            <returns>
            True/False.
            </returns>
        </member>
        <member name="M:GreyCrammedContainer.TypeGetters.IsDictionary(System.Object)">
            <summary>
            Checks if the provided object is a dictionary.
            </summary>
            <param name="obj"></param>
            <returns>
            True/False.
            </returns>
        </member>
        <member name="M:GreyCrammedContainer.TypeGetters.HasDefaultConstructor(System.Type)">
            <summary>
            Checks if the provided object has an empty constructor defined.
            </summary>
            <param name="Type">The type to check</param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.TypeGetters.GetPropertyTypeNameComplexity(System.String,System.Type)">
            <summary>
            Gets the Type's serializableType from its property name.
            </summary>
            <param name="value">The type's property name</param>
            <param name="FInfo">The Type's field type.</param>
            <returns>
            The object's SerializableType.
            </returns>
        </member>
        <member name="M:GreyCrammedContainer.TypeGetters.GetPropertyTypeNameComplexityDeserialization(System.String,System.Type,System.String)">
            <summary>
            Gets the Type's DeserializableType from its property name.
            </summary>
            <param name="value">The type's property name</param>
            <param name="FInfo">The Type's field type.</param>
            <param name="FullName">The type's full name.</param>
            <returns>
            The object's SerializableType.
            </returns>
        </member>
        <member name="M:GreyCrammedContainer.TypeGetters.FetchType(System.Object)">
            <summary>
            Gets the object's .GCC serializableType.
            </summary>
            <param name="Received">The received object.</param>
            <returns>
            The provided object's serializableType.
            </returns>
        </member>
        <member name="M:GreyCrammedContainer.TypeGetters.IsClassStruct(System.Object)">
            <summary>
            Checks if the provided object is a class or a struct.
            </summary>
            <param name="obj">The provided object.</param>
            <returns>
            True/False.
            </returns>
        </member>
        <member name="M:GreyCrammedContainer.TypeGetters.IsComplex(System.Object)">
            <summary>
            Checks if the provided object is considered "complex", for example: arrays, lists, classes, structs, etc.
            </summary>
            <param name="received">The received object.</param>
            <returns>
            True/False.
            </returns>
        </member>
        <member name="M:GreyCrammedContainer.TypeGetters.SimpleSerializableType(GreyCrammedContainer.SerializableType)">
            <summary>
            Checks if the serializableType is considered simple.
            </summary>
            <param name="Type"></param>
            <returns>
            True if the type is Boolean, string, character, enum or numeric.
            </returns>
        </member>
        <member name="M:GreyCrammedContainer.TypeGetters.IsMultiDimensionalArray(System.Object)">
             <summary>
            Checks if the object is a two or more dimensional array.
             </summary>
             <param name="Received">The object to check.</param>
             <returns></returns>
        </member>
        <member name="T:GreyCrammedContainer.Utils">
            <summary>
            A class that provides methods for different purposes.
            </summary>
        </member>
        <member name="M:GreyCrammedContainer.Utils.GetVariableName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the provided object's member name.
            </summary>
            <typeparam name="T">The generic type.</typeparam>
            <param name="expr">The func expression.</param>
            <returns></returns>
        </member>
        <member name="M:GreyCrammedContainer.Utils.EnumerateValueTuple(System.Object)">
            <summary>
            Enumerates the tuple's values.
            </summary>
            <param name="valueTuple">The tuple to enumerate.</param>
            <returns></returns>
        </member>
    </members>
</doc>
